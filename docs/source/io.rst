.. _io_options:


Saving intermediate files
=========================

-------
Options
-------

Each of the classes
:class:`~psiresp.multiresp.MultiResp`, :class:`~psiresp.resp.Resp`,
:class:`~psiresp.conformer.Conformer`, and :class:`~psiresp.orientation.Orientation`
offer options to control the input and output. They can be created
with the following keywords:

* `save_output = True|False`: whether to save QM files and intermediate PsiRESP files
* `load_input = True|False`: whether to load values from QM and intermediate files to avoid recomputing
* `directory_path`: an optional path for saving and reading files for that particular instance. If this is not given, then
* `name`: paths will be created from the instance names.

If paths are created automatically, they are nested. For example, if you
are running a MultiResp job with molecules named "nme2ala2" and "methylammonium",
the directory tree will look like::

    .
    └── multiresp
        ├── methylammonium
        │   └── methylammonium_c001
        │       ├── methylammonium_c001_o001
        │       │   ├── methylammonium_c001_o001_grid.dat
        │       │   ├── methylammonium_c001_o001_grid_esp.dat
        │       │   └── methylammonium_c1_o1_grid_esp.log
        │       └── methylammonium_c001_o002
        │           ├── methylammonium_c001_o002_grid.dat
        │           ├── methylammonium_c001_o002_grid_esp.dat
        │           └── methylammonium_c1_o2_grid_esp.log
        └── nme2ala2
            ├── nme2ala2_c001
            │   ├── nme2ala2_c001_o001
            │   │   ├── nme2ala2_c001_o001_grid.dat
            │   │   ├── nme2ala2_c001_o001_grid_esp.dat
            │   │   └── nme2ala2_c001_o001_grid_esp.log
            │   ├── nme2ala2_c001_o002
            │   │   ├── nme2ala2_c001_o002_grid.dat
            │   │   ├── nme2ala2_c001_o002_grid_esp.dat
            │   │   └── nme2ala2_c001_o002_grid_esp.log
            │   ├── nme2ala2_c001_o003
            │   │   ├── nme2ala2_c001_o003_grid.dat
            │   │   ├── nme2ala2_c001_o003_grid_esp.dat
            │   │   └── nme2ala2_c001_o003_grid_esp.log
            │   └── nme2ala2_c001_o004
            │       ├── nme2ala2_c001_o004_grid.dat
            │       ├── nme2ala2_c001_o004_grid_esp.dat
            │       └── nme2ala2_c001_o004_grid_esp.log
            └── nme2ala2_c002
                ├── nme2ala2_c002_o001
                │   ├── nme2ala2_c002_o001_grid.dat
                │   ├── nme2ala2_c002_o001_grid_esp.dat
                │   └── nme2ala2_c002_o001_grid_esp.log
                ├── nme2ala2_c002_o002
                │   ├── nme2ala2_c002_o002_grid.dat
                │   ├── nme2ala2_c002_o002_grid_esp.dat
                │   └── nme2ala2_c002_o002_grid_esp.log
                ├── nme2ala2_c002_o003
                │   ├── nme2ala2_c002_o003_grid.dat
                │   ├── nme2ala2_c002_o003_grid_esp.dat
                │   └── nme2ala2_c002_o003_grid_esp.log
                └── nme2ala2_c002_o004
                    ├── nme2ala2_c002_o004_grid.dat
                    ├── nme2ala2_c002_o004_grid_esp.dat
                    └── nme2ala2_c002_o004_grid_esp.log

.. note::

  The directory nesting relies on knowing the path of the parent
  Resp or Conformer object, so it will not automatically work if
  Conformers or Orientations are created manually. For this reason
  it is **highly recommended** to use the
  :meth:`~psiresp.resp.Resp.add_conformer` and
  :meth:`~psiresp.conformer.Conformer.add_orientation` methods instead.

  However, this is not a concern with creating Resp instances to add
  to a MultiResp object.

-----
Files
-----

At present, the options detailed above control the saving of both Psi4 files,
and intermediate files generated by PsiRESP itself.

These intermediate files are:

* {name}_grid.dat : this contains the grid on which to compute the electrostatic potential
* {name}_grid_esp.dat : this contains the computed ESP from Psi4 in array format
* optimized_geometry.xyz : the optimized geometry of each conformer in XYZ format
* orientation_coordinates.npy : the coordinates of each orientation in angstrom
* conformer_coordinates.npy : the coordinates of each conformer in angstrom

If ``load_input=True`` and files with matching paths and names are found,
*those values will be read and used*. There is no sanity checking! In addition,
all file formats are determined by suffix:

.. list-table:: File formats
    :widths: 25 25 50
    :header-rows: 1

    * - suffix
      - output type
      - loader function
    * - csv
      - Pandas DataFrame
      - pd.read_csv
    * - dat, txt
      - Numpy array
      - np.loadtxt
    * - npy, npz
      - Numpy array
      - np.load
    * - xyz, pdb, mol2
      - plain text
      - f.read()
